<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>About</title>
    </properties>

    <body>
        <section name="About">
            <p>
                The ${project.name} is a Java library which compiles <a href="http://lesscss.org/">Less</a> source files to
                <a href="http://www.w3.org/Style/CSS/">CSS</a> code.
            </p>
            <p>
                From <a href="http://lesscss.org/">Less</a> website:<br />
                <q>Less is a CSS pre-processor, meaning that it extends the CSS language, adding features that allow variables,
                mixins, functions and many other techniques that allow you to make CSS that is more maintainable, themable
                and extendable.</q>
            </p>
        </section>
        <section name="Compatibility">
            <p>
                 The compiler is compatible with version <a href="https://github.com/less/less.js/releases/tag/v1.7.5">1.7.5</a>.
                 The library is based on the official <a href="http://lesscss.org/">Less</a> JavaScript compiler adapted to the
                <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Rhino</a> engine.
            </p>
        </section>
        <section name="Requirements">
            <p>
                The compiler to run requires:
            </p>
            <ul>
                <li>Java 6.0 or higher</li>
                <li>Third-Party Dependencies (<a href="dependencies.html">see list</a>)</li>
            </ul>
        </section>
        <section name="Download">
            <p>
                You can download the library from <a href="download.html">this page</a> or using various
                <a href="dependency-info.html">dependency management tools</a>.
            </p>
        </section>
        <section name="Concept">
            <p>
                The library contains two compilers:
            </p>
            <ul>
                <li>
                    <a href="apidocs/biz/gabrys/lesscss/compiler2/NativeLessCompiler.html">NativeLessCompiler</a>
                    a compiler with a shell-type API
                </li>
                <li>
                    <a href="apidocs/biz/gabrys/lesscss/compiler2/LessCompiler.html">LessCompiler</a>
                    a facade for the <a href="apidocs/biz/gabrys/lesscss/compiler2/NativeLessCompiler.html">NativeLessCompiler</a>
                    with a developer-friendly API
                </li>
            </ul>
            <p>
                The idea for the <a href="apidocs/biz/gabrys/lesscss/compiler2/NativeLessCompiler.html">NativeLessCompiler</a>
                class was based on the <a href="https://github.com/marceloverdijk/lesscss-java">lesscss-java</a>
                library by <a href="https://github.com/marceloverdijk">Marcel Overdijk</a>.
            </p>
        </section>
        <section name="Usage">
            <p>
                The <a href="apidocs/biz/gabrys/lesscss/compiler2/LessCompiler.html">LessCompiler</a> contains 14 methods.
                Below is an example of how to use some of them:
            </p>
            <pre>String cssCode = null;
LessOptions options = null;

// create compiler
LessCompiler compiler = new LessCompiler();

// compile source code
cssCode = compiler.compile(".basic { display: block; }");

// compile source code with custom options
options = new LessOptionsBuilder().ieCompatibilityOff().build();
cssCode = compiler.compile(".basic { display: block; }", options);

// compile source file
cssCode = compiler.compile(new File("source.less"));

// compile source file and save CSS code in an output file
compiler.compile(new File("source.less"), new File("output.css"));

// compile source file and compress CSS code
cssCode = compiler.compileAndCompress(new File("source.less"));

// compile source code and generate inline source map
cssCode = compiler.compileWithInlineSourceMap(".basic { display: block; }", new LessOptions());

// compile source file and generate source map (save it in output.map file)
options = new LessOptionsBuilder().sourceMapBasePath("basePath").build();
compiler.compileWithSourceMap(new File("source.less"), new File("output.css"), new File("output.map"), options);

// compile source file and generate source map (save it in output.css.map file)
compiler.compileWithSourceMap(new File("source.less"), new File("output.css"), options);</pre>
        </section>
    </body>
</document>
